#!/bin/bash
. config



IFS=,$'\n' read -d '' -r -a public_ip_arr < ${PUBLIC_IPS_FILE}
public_ip_arr=(${public_ip_arr})

IFS=,$'\n' read -d '' -r -a private_ip_arr < ${PRIVATE_IPS_FILE}
private_ip_arr=(${private_ip_arr})

VM_NUMBER=$(echo ${public_ip_arr[@]} | wc -w)

mesh_network_cnnection_number=$(cat  ${MESH_NETWORK_MATRIX_FILE})
#echo ${mesh_network_cnnection_number}

#This variable track the index of wg for Destination VMs, which are initially assigned to 0. 
declare -a WG_INDEX_TRACKING
for i in `seq 1 1 ${VM_NUMBER}`
do
    WG_INDEX_TRACKING[$i]=0
done
#echo wg_trac: ${WG_INDEX_TRACKING[@]}




#$1: source index in latency matrix  $2: destination index in latency matrix
function get_default_latency () {
  sed "${1}q;d" ${LATENCY_FILE} | cut -f $2 -d","
}


#$1: source index in bandwidth matrix  $2: destination index bandwidth matrix
function get_default_bandwidth () {
 sed "${1}q;d" ${BANDWIDTH_FILE} | cut -f $2 -d","
}


# This function sets a random value between 1 and  default latency or bandwidth dependin on value type($3) which can be B or L. B stands for bandwidth and L stands for Latency
# $1" source node index in latency matrix, $2: destination node index in latency matrix, and $3  assigns value B(bandwidth) or L(latency)
# This functions assignes the Upper tringle in mesh matrix
function set_random_latency_bandwidth () {
    VALUE_TYPE=$3
    if [[ "${VALUE_TYPE}" == "B" ]]
    then
          DEFAULT_VALUE=$(sed "${1}q;d" ${BANDWIDTH_FILE} | cut -f $2 -d",")
          #echo DEFAULT_BANDWIDTH: ${DEFAULT_VALUE}
   else
          DEFAULT_VALUE=$(sed "${1}q;d" ${LATENCY_FILE} | cut -f $2 -d",")
          #echo DEFAULT_LATENCY: ${DEFAULT_VALUE}
   fi

   if (( ${DEFAULT_VALUE}!=0 ))   
   then
         ASSIGNED_VALUE=$(( ( RANDOM % ${DEFAULT_VALUE} )  + ${MESH_NET_BASE_BANDLAT_VALUE} ))
   else
        ASSIGNED_VALUE=0
   fi 
       echo ${ASSIGNED_VALUE}
}

# This function the index of wg for lower triangle in the mesh network. 
# S1: index of VM in the  wg_index array. Note that index starts from 0.
function get_wg_index (){
  wg_index_value=${WG_INDEX_TRACKING[$1]} # reterive wg_index
  tmp_wg_index_value=$[${WG_INDEX_TRACKING["$1"]}+1] # update the value of wg_index
  WG_INDEX_TRACKING["$1"]=${tmp_wg_index_value} # update wg_index_tracking
 echo ${wg_index_value}
}
#: '
#echo wg_tracking_b: ${WG_INDEX_TRACKING[@]}
#get_wg_index 1
#echo wg_tracking_1: ${WG_INDEX_TRACKING[@]}

#get_wg_index 2
#echo wg_tracking_2: ${WG_INDEX_TRACKING[@]}

#get_wg_index 1
#echo wg_tracking_1: ${WG_INDEX_TRACKING[@]}

#get_wg_index 3
#echo wg_tracking_3: ${WG_INDEX_TRACKING[@]}

#exit
#'
# update the variable 






WG_CONNECTION_INDEX=0
# Apply TC rules on each node
for SOUR_VM_INDEX in `seq 1 1 ${VM_NUMBER}`
do

        echo SOURCE_VM_INDEX: ${SOUR_VM_INDEX}
        SOUR_VM_CONN_NUMBER=$(echo  ${mesh_network_cnnection_number} | cut -f ${SOUR_VM_INDEX} -d ' ')
        PUBLIC_IP=$(echo ${public_ip_arr[@]} | cut -f ${SOUR_VM_INDEX} -d ' ')
        APPLIED_RULES_WG_CONNECTINONS=0
        for DEST_VM_INDEX in `seq ${SOUR_VM_INDEX} 1 ${VM_NUMBER}` 
        do

                   CURRENT_WG_COONECTION_NUMBER=$(echo ${SOUR_VM_CONN_NUMBER} | cut -f ${DEST_VM_INDEX} -d ',')
                   echo connection_number: ${CURRENT_WG_COONECTION_NUMBER}
                  if [[ $SOUR_VM_INDEX != $DEST_VM_INDEX  ]]
                   then

                       for (( wg_connect_index=${APPLIED_RULES_WG_CONNECTINONS}; wg_connect_index<$[${CURRENT_WG_COONECTION_NUMBER}+${APPLIED_RULES_WG_CONNECTINONS}]; wg_connect_index++)) 
                       do   
                             if (( ${wg_connect_index}==0 ))
                             then
                                  PUBLIC_IP_ON_DEST_VM=$(echo ${public_ip_arr[@]} | cut -f ${DEST_VM_INDEX} -d ' ')
                                  echo public_ip_dest: ${PUBLIC_IP_ON_DEST_VM}

                                  #echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate $(get_default_bandwidth ${SOUR_VM_INDEX} ${DEST_VM_INDEX})Mbit/s --delay $(get_default_latency ${SOUR_VM_INDEX} ${DEST_VM_INDEX})ms "
                                  echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate $(get_default_bandwidth ${SOUR_VM_INDEX} ${DEST_VM_INDEX})Mbit/s --delay $(get_default_latency ${SOUR_VM_INDEX} ${DEST_VM_INDEX})ms "
                                  echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP_ON_DEST_VM} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate $(get_default_bandwidth ${SOUR_VM_INDEX} ${DEST_VM_INDEX})Mbit/s  "
                             else
                                  RANDOM_BANDWIDTH=$(set_random_latency_bandwidth ${SOUR_VM_INDEX} ${DEST_VM_INDEX} "B")
                                  RANDOM_LATENCY=$(set_random_latency_bandwidth ${SOUR_VM_INDEX} ${DEST_VM_INDEX} "L")
                                  #echo RL: ${RANDOM_LATENCY}
                                  #Assign bandwidth constraint for upper triangle in matrix 
                                  #echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate ${RANDOM_BANDWIDTH}Mbit/s --delay ${RANDOM_LATENCY}ms "
                                  echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate ${RANDOM_BANDWIDTH}Mbit/s --delay ${RANDOM_LATENCY}ms "


                                  #Assign bandwidth constraint for lower triangle in matrix 
                                  #PUBLIC_IP_ON_DEST_VM=$(echo ${public_ip_arr[@]} | cut -f ${DEST_VM_INDEX} -d ' ')
                                  #echo public_ip_dest: ${PUBLIC_IP_ON_DEST_VM}
                                  #wg_connect_index=$(get_wg_index ${DEST_VM_INDEX})

                                  #echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate ${RANDOM_BANDWIDTH}Mbit/s "
                                  #echo ssh  -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $VM_USERNAME@${PUBLIC_IP_ON_DEST_VM} "sudo tcset ${MESH_NETWORK_INTERFACE}${wg_connect_index} --rate ${RANDOM_BANDWIDTH}Mbit/s  "


                              fi
                        done
                   fi

                   APPLIED_RULES_WG_CONNECTINONS=$((${CURRENT_WG_COONECTION_NUMBER}+${APPLIED_RULES_WG_CONNECTINONS}))
        done
done





